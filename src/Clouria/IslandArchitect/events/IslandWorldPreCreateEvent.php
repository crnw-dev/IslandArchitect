<?php
/*
		
		  _____     _                 _          
		  \_   \___| | __ _ _ __   __| |         
		   / /\/ __| |/ _` | '_ \ / _` |         
		/\/ /_ \__ \ | (_| | | | | (_| |         
		\____/ |___/_|\__,_|_| |_|\__,_|         
		                                         
		   _            _     _ _            _   
		  /_\  _ __ ___| |__ (_) |_ ___  ___| |_ 
		 //_\\| '__/ __| '_ \| | __/ _ \/ __| __|
		/  _  \ | | (__| | | | | ||  __/ (__| |_ 
		\_/ \_/_|  \___|_| |_|_|\__\___|\___|\__|
		                                         
		@ClouriaNetwork | Apache License 2.0
														*/
declare(strict_types=1);

namespace Clouria\IslandArchitect\events;

use room17\SkyBlock\SkyBlock;
use room17\SkyBlock\session\Session;
use Clouria\IslandArchitect\IslandArchitect;

class IslandWorldPreCreateEvent extends IslandArchitectEvent {

    /**
     * @var Session
     */
    protected $session;

    /**
     * @var string|null The island world name
     */
    protected $identifier;

    /**
     * @var string
     */
    protected $type;
    /**
     * @var bool
     */
    protected $is_template_island;

    public function __construct(Session $session, ?string $identifier, string $type, bool $is_template_island) {
        parent::__construct();
        $this->session = $session;
        $this->identifier = $is_template_island ? $identifier : null;
        $this->type = $type;
        $this->is_template_island = $is_template_island;
    }

    /**
     * @return string The island world name (The identifier of non template island levels is generated by the SkyBlock plugin after this event so a null will be returned)
     */
    public function getIdentifier() : ?string {
        return $this->identifier;
    }

    /**
     * @param string|null $identifier You can still set an identifier for non template island levels, IslandArchitect will generate the level with non template island generators
     * @return void
     */
    public function setIdentifier(?string $identifier) : void {
        $this->identifier = $identifier;
    }

    /**
     * @return Session
     */
    public function getSession() : Session {
        return $this->session;
    }

    /**
     * @return string
     */
    public function getType() : string {
        return $this->type;
    }

    /**
     * @param string $type
     * @return bool
     */
    public function setType(string $type) : bool {
        $mapped = IslandArchitect::getInstance()->mapGeneratorType($type);
        if ($mapped === null and !SkyBlock::getInstance()->getGeneratorManager()->isGenerator($type)) return false;
        $this->type = $type;
        return true;
    }

    /**
     * @return bool
     */
    public function isTemplateIsland() : bool {
        return $this->is_template_island;
    }
}